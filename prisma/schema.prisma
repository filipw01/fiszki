// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email             String           @id @unique
  password          String
  flashcards        Flashcard[]      @relation(name: "UserFlashcards")
  tags              Tag[]            @relation(name: "UserTags")
  folders           Folder[]         @relation(name: "UserFolders")
  learningSessionId String?
  learningSession   LearningSession? @relation(name: "UserLearningSession")
}

model Flashcard {
  id                           String           @id @default(uuid())
  ownerEmail                   String
  owner                        User             @relation(name: "UserFlashcards", fields: [ownerEmail], references: [email])
  front                        String
  frontDescription             String?
  frontImage                   String?
  back                         String
  backDescription              String?
  backImage                    String?
  tags                         Tag[]
  folderId                     String
  folder                       Folder           @relation(name: "FolderFlashcards", fields: [folderId], references: [id])
  streak                       Int              @default(0)
  nextStudy                    DateTime         @default(now())
  lastSeen                     DateTime         @default(now())
  randomSideAllowed            Boolean          @default(true)
  uncompletedLearningSessionId String?
  completedLearningSessionId   String?
  uncompletedLearningSession   LearningSession? @relation(name: "LearningSessionUncompletedFlashcards", fields: [uncompletedLearningSessionId], references: [id])
  completedLearningSession     LearningSession? @relation(name: "LearningSessionCompletedFlashcards", fields: [completedLearningSessionId], references: [id])
}

model Tag {
  id         String      @id @default(uuid())
  name       String
  color      String
  flashcards Flashcard[]
  ownerEmail String
  owner      User        @relation(name: "UserTags", fields: [ownerEmail], references: [email])
}

model Folder {
  id             String      @id @default(uuid())
  name           String
  color          String
  flashcards     Flashcard[] @relation(name: "FolderFlashcards")
  parentFolderId String?
  parentFolder   Folder?     @relation(name: "FolderFolders", fields: [parentFolderId], references: [id])
  folders        Folder[]    @relation(name: "FolderFolders")
  ownerEmail     String
  owner          User        @relation(name: "UserFolders", fields: [ownerEmail], references: [email])
}

model LearningSession {
  id                    String      @id @default(uuid())
  uncompletedFlashcards Flashcard[] @relation(name: "LearningSessionUncompletedFlashcards")
  completedFlashcards   Flashcard[] @relation(name: "LearningSessionCompletedFlashcards")
  ownerEmail            String      @unique
  owner                 User        @relation(name: "UserLearningSession", fields: [ownerEmail], references: [email])
}
